<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" >
    <channel>
        <title>Все статьи подряд / Go / Хабр</title>
        <link>https://habr.com/ru/hubs/go/articles/</link>
        <description>
            <![CDATA[Go – компилируемый, многопоточный язык программирования]]>
        </description>
        <language>ru</language>
        <managingEditor>editor@habr.com</managingEditor>
        <generator>habr.com</generator>
        <pubDate>Sun, 25 Feb 2024 14:43:32 GMT</pubDate>
        <image>
            <link>https://habr.com/ru/</link>
            <url>https://habrastorage.org/webt/ym/el/wk/ymelwk3zy1gawz4nkejl_-ammtc.png</url>
            <title>Хабр</title>
        </image>
        <item>
            <title>
                <![CDATA[Электронные подписи. Но что мы знаем о мультиподписях?]]>
            </title>
            <guid isPermaLink="true">https://habr.com/ru/articles/795961/</guid>
            <link>https://habr.com/ru/articles/795961/?utm_campaign=795961&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
            <description>
                <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/c47/16a/edd/c4716aedd0a444ee868d20968ed28420.png" /><p>Небольшое введение в технологии MPC и мультиподписей. </p><p>Краткое описание набора протоколов и используемой реализации мультиподписи.</p><p></p><a href="https://habr.com/ru/articles/795961/?utm_campaign=795961&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
            </description>
            <pubDate>Sat, 24 Feb 2024 17:11:36 GMT</pubDate>
            <dc:creator>
                <![CDATA[valli0x]]>
            </dc:creator>
            <category>
                <![CDATA[электронные подписи]]>
            </category>
            <category>
                <![CDATA[мультиподпись]]>
            </category>
            <category>
                <![CDATA[mpc]]>
            </category>
        </item>
        <item>
            <title>
                <![CDATA[[Перевод] Как я пишу HTTP-сервисы спустя 13 лет работы с Go]]>
            </title>
            <guid isPermaLink="true">https://habr.com/ru/articles/793166/</guid>
            <link>https://habr.com/ru/articles/793166/?utm_campaign=793166&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
            <description>
                <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/2d4/804/c74/2d4804c74fc0bc50e8ab6aa9d01a63f2.png" /><p>Примерно шесть лет назад я написал пост о том, <a href="https://pace.dev/blog/2018/05/09/how-I-write-http-services-after-eight-years.html" rel="noopener noreferrer nofollow">как пишу HTTP-сервисы на Go</a>, и сегодня я снова хочу рассказать, как пишу HTTP-сервисы.</p><p>Тот пост оказался довольно популярным и вызвал обсуждения, повлиявшие на то, как я делаю это сегодня. И спустя годы ведения подкаста <a href="https://changelog.com/gotime" rel="noopener noreferrer nofollow">Go Time</a>, обсуждения Go в<a href="https://twitter.com/matryer" rel="noopener noreferrer nofollow">X/Twitter</a> и поддержки подобного кода я решил, что настало время обновить информацию.</p><p>(Если вы педант и скажете, что Go не совсем 13 лет, то я отвечу, что начал писать HTTP-сервисы на Go&nbsp;<a href="https://go.dev/doc/devel/pre_go1#r59" rel="noopener noreferrer nofollow">версии .r59</a>.)</p><p>В этом посте рассматривается широкий спектр тем, связанных с созданием сервисов на Go</p><p></p><a href="https://habr.com/ru/articles/793166/?utm_campaign=793166&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Sat, 24 Feb 2024 08:24:34 GMT</pubDate>
<dc:creator>
    <![CDATA[PatientZero]]>
</dc:creator>
<category>go</category>
<category>http-сервер</category>
<category>юнит-тестирование</category>
<category>сквозное тестирование</category>
</item>
<item>
    <title>
        <![CDATA[Обзор библиотеки Go Kit]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/793888/</guid>
    <link>https://habr.com/ru/companies/otus/articles/793888/?utm_campaign=793888&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/0d5/09d/8f5/0d509d8f5c286f455626f8ce68cf790a.png" /><p><em>Салют, Хабр!</em></p><p><strong>Go Kit</strong> предоставляет стандартизированный способ создания сервисов, с ее помощью можно легко реализовать совместимость сервисов. С его помощью можно легко интегрировать различные транспортные протоколы, такие как HTTP, RPC, gRPC, и многое другое, а также реализовывать общие паттерны: логирование, метрики, трассировка. В общем, Go Kit хорошо подходит для разработки микросервисов на go.</p><p>Мотивацию создания этой либы разработчики описали так:</p><p><em>Go стал языком сервера, но он по-прежнему недостаточно представлен в так называемых «современных корпоративных» компаниях, таких как Facebook, Twitter, Netflix и SoundCloud.&nbsp;Многие из этих организаций обратились к стекам на основе JVM для создания своей бизнес-логики, во многом благодаря библиотекам и экосистемам, которые напрямую поддерживают их микросервисные архитектуры.</em></p><p><em>Чтобы достичь следующего уровня успеха, Go нужно нечто большее, чем простые примитивы и идиомы.&nbsp;Ему нужен всеобъемлющий набор инструментов для последовательного распределенного программирования в целом.&nbsp;Go Kit — это набор пакетов и лучших практик, которые обеспечивают комплексный, надежный и надежный способ создания микросервисов для организаций любого размера.</em></p><p></p><a href="https://habr.com/ru/articles/793888/?utm_campaign=793888&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Mon, 19 Feb 2024 07:07:55 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[gokit]]>
</category>
<category>
    <![CDATA[микросервисы]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Go 1.22: Rangefunc Experiment]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/794564/</guid>
    <link>https://habr.com/ru/articles/794564/?utm_campaign=794564&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<p>Разработчики Go в версии 1.22 добавили предварительную экспериментальную реализацию итераторов на уровне языка. </p><p></p><a href="https://habr.com/ru/articles/794564/?utm_campaign=794564&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Sun, 18 Feb 2024 20:39:04 GMT</pubDate>
    <dc:creator>
        <![CDATA[M1ker1n]]>
    </dc:creator>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[rangefunc]]>
    </category>
    <category>
        <![CDATA[итератор]]>
    </category>
    <category>
        <![CDATA[эксперимент]]>
    </category>
    <category>
        <![CDATA[go1.22]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[Шаблон телеграмм бота на go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/794098/</guid>
    <link>https://habr.com/ru/articles/794098/?utm_campaign=794098&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/470/76a/aaa/47076aaaaa28a0dc1f1a505f7253d557.png" /><p>Шаблон для телеграмм ботов на go - Ваш надежный помощник в создании удобного и функционального бота.</p><p>В него можно легко добавлять новые модули, расширяющие возможности бота.<br>Не тратьте время на банальности, его уже потратили для Вас !</p><p></p><a href="https://habr.com/ru/articles/794098/?utm_campaign=794098&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Run Go, Run !</a>]]>
</description>
<pubDate>Thu, 15 Feb 2024 22:43:12 GMT</pubDate>
<dc:creator>
    <![CDATA[Ander_kot]]>
</dc:creator>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[telegram]]>
</category>
<category>
    <![CDATA[telegrambot]]>
</category>
<category>
    <![CDATA[шаблон]]>
</category>
<category>
    <![CDATA[бот]]>
</category>
<category>
    <![CDATA[bot]]>
</category>
<category>
    <![CDATA[template]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Обзор библиотеки bleve в Golang]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/793526/</guid>
    <link>https://habr.com/ru/companies/otus/articles/793526/?utm_campaign=793526&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/661/27d/dc3/66127ddc3491eea59e9245cc4ded7061.jpg" /><p><strong>Bleve</strong> предоставляет<strong>индексации</strong> любых структур данных Go, он поддерживает различные типы полей:<em>текст</em>,<em>числа</em>,<em>даты</em> и<em>логические</em><em>значения</em>, а также разнообразие запросов: от простых терминов до фраз и сложных булевых запросов.</p><p>В этой статье рассмотрим основной функционал этой библиотеки.</p><p></p><a href="https://habr.com/ru/articles/793526/?utm_campaign=793526&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Wed, 14 Feb 2024 17:48:05 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[bleve]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Шаблонизатор GO text template для новичков]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/792802/</guid>
    <link>https://habr.com/ru/articles/792802/?utm_campaign=792802&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/439/ecf/654/439ecf654eac325923288c1eac0341fd.png" /><p>Шаблоны - это инструмент программирования, который позволяет создавать структурированный и повторно используемый контент или код. Они имеют много применений в различных областях, включая веб-разработку, генерацию отчетов, форматирование текста и многое другое.&nbsp;В целом, шаблоны предоставляют удобный способ создания структурированного и гибкого контента или кода, что упрощает&nbsp;создание контента для различных приложений и веб-сайтов.</p><p>Все инструкции шаблона заключаются в символы.</p><p></p><a href="https://habr.com/ru/articles/792802/?utm_campaign=792802&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Sat, 10 Feb 2024 11:30:35 GMT</pubDate>
    <dc:creator>
        <![CDATA[zorwaldo]]>
    </dc:creator>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[template]]>
    </category>
    <category>
        <![CDATA[text-template]]>
    </category>
    <category>
        <![CDATA[go template]]>
    </category>
    <category>
        <![CDATA[go text template]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[[Перевод] Представляем gqlgen: генератор серверов GraphQL для Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/792700/</guid>
    <link>https://habr.com/ru/articles/792700/?utm_campaign=792700&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/376/907/8a9/3769078a995f57801a0b22c1beff8298.png" /><p>В 99designs мы находимся на пути деконструкции нашего PHP-монолита в микросервисную архитектуру, при этом большинство новых сервисов пишется на Go. В этот период наша фронтенд-команда также применила безопасность типов, перейдя с Javascript на TypeScript и React.</p><p>После того как мы внедрили безопасность типов в бэкенд и фронтенд, стало очевидно, что наши конечные точки REST, созданные на заказ, не могут преодолеть разрыв между типами. Нам нужен был способ объединить эти системы типов и распутать наши конечные точки API.</p><p>Нам нужна была система безопасности типов для API. GraphQL выглядел многообещающе. Однако, изучив его, мы поняли, что не существует серверного подхода, который бы отвечал всем нашим требованиям. Поэтому мы разработали свой собственный, который мы назвали gqlgen.</p><p></p><a href="https://habr.com/ru/articles/792700/?utm_campaign=792700&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Fri, 09 Feb 2024 17:08:07 GMT</pubDate>
    <dc:creator>
        <![CDATA[comerc]]>
    </dc:creator>
    <category>graphql</category>
</item>
<item>
    <title>
        <![CDATA[Domain Driven Design в Go – это почти не больно]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/oleg-bunin/articles/791420/</guid>
    <link>https://habr.com/ru/companies/oleg-bunin/articles/791420/?utm_campaign=791420&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/5b7/8ef/e1c/5b78efe1c32ac7b662ac8ce413dc9d12.jpg" /><p>Как выглядят паттерны DDD (Domain Driven Design) в большом проекте? А самое главное, стоит ли их вообще использовать? Рассмотрим, какими инструментами можно реализовать DDD на Go и оценим, насколько это больно.</p><p>Меня зовут <strong>Илья Сергунин</strong>, я backend-сочинитель в Авито: занимаюсь тем, что передаю смартфоны в хорошие руки. В этой статье попытаюсь объяснить, как можно натянуть DDD на Go без синтаксического сахара и магии Java-подобных языков, и без больших крутых ORM c Data mapper, которые также отсутствуют в Go.</p><p></p><a href="https://habr.com/ru/articles/791420/?utm_campaign=791420&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Thu, 08 Feb 2024 09:27:27 GMT</pubDate>
<dc:creator>
    <![CDATA[maranqz (Конференции Олега Бунина (Онтико), AvitoTech)]]>
</dc:creator>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[ddd]]>
</category>
<category>
    <![CDATA[domain driven design]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[golangconf]]>
</category>
<category>
    <![CDATA[предметно-ориентированное]]>
</category>
<category>
    <![CDATA[проектирование]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Go 1.22: Интерактивные заметки к релизу]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/792242/</guid>
    <link>https://habr.com/ru/articles/792242/?utm_campaign=792242&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<p><img src="https://habrastorage.org/webt/sl/rg/xy/slrgxynh7zns2zthlhjldphdpyy.png" alt="Go 1.22"></p><br><p>Вчера вышел Go 1.22, и многие новые фичи можно попробовать прямо из браузера. Давайте пройдемся по ним!</p><a href="https://habr.com/ru/articles/792242/?utm_campaign=792242&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать дальше &rarr;</a>]]>
</description>
<pubDate>Thu, 08 Feb 2024 07:17:28 GMT</pubDate>
<dc:creator>
    <![CDATA[nalgeon]]>
</dc:creator>
<category>
    <![CDATA[release notes]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Где изучать Golang в 2024]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/792108/</guid>
    <link>https://habr.com/ru/articles/792108/?utm_campaign=792108&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/814/9f1/ac1/8149f1ac11cc03c991d8432444e87171.jpeg" /><p>2024 году изучение языка программирования Go (Golang) остается одним из наиболее перспективных и востребованных направлений для разработчиков.&nbsp;</p><p>Одним из главных преимуществ изучения Golang в 2024 году является его широкое применение в различных областях разработки программного обеспечения. Он идеально подходит для создания масштабируемых и высокопроизводительных веб-серверов, микросервисов и распределенных систем. Благодаря своей простоте и эффективности, Golang также находит применение в области разработки сетевых приложений, обработки данных, а также в сфере искусственного интеллекта и машинного обучения.</p><p>Еще одним преимуществом изучения Golang является его активное сообщество разработчиков. Go имеет обширную документацию, мощные библиотеки и инструменты, которые помогут вам эффективно разрабатывать приложения на этом замечательном языке. Благодаря активному сообществу вы сможете быстро получить поддержку и решить любые возникающие проблемы.</p><p>Ежедневно в наш чат приходят новички и задают один и тот же вопрос, посоветуйте ресурсы для начинающего, сегодня вышла&nbsp;<a href="https://t.me/Golang_google/1675" rel="noopener noreferrer nofollow">новая версия версия&nbsp;</a><strong><a href="https://t.me/Golang_google/1675" rel="noopener noreferrer nofollow">Go 1.22.0</a></strong><a href="https://t.me/Golang_google/1675" rel="noopener noreferrer nofollow">,&nbsp;</a>в честь этого мы собрали список бесплатных курсов и полезных источников. Мы уже писали про многие из них в нашем&nbsp;<a href="https://t.me/+oPqQCfEwnKkyN2Vi" rel="noopener noreferrer nofollow">канале для Golang разработчиков</a>&nbsp;– залетайте, там много всего полезного.&nbsp;</p><p>Надеюсь, этот список будет вам полезен)</p><p>Давайте начнем!</p><p></p><a href="https://habr.com/ru/articles/792108/?utm_campaign=792108&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать</a>]]>
</description>
<pubDate>Wed, 07 Feb 2024 14:37:13 GMT</pubDate>
<dc:creator>
    <![CDATA[Golangcoder]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[курсы]]>
</category>
<category>
    <![CDATA[туториалы]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Задача «Получить значение у N url из списка» с собеседования на Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/791874/</guid>
    <link>https://habr.com/ru/articles/791874/?utm_campaign=791874&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/281/46c/ae3/28146cae3e07198c42506ba4f1fb79cf.jpeg" /><p>На данный момент нахожусь в активном поиске нового проекта, поэтому активно хожу на собеседования.</p><p>Решил поделиться своими мыслями о решении задачи, которую (как мне кажется) часто дают на собеседованиях. </p><p><strong>Задача</strong></p><p>Написать функцию, которая принимает несколько url адресов, а отдает сумму адресов и ошибку, если что-то пошло не так. </p><p>Интересно обсудить варианты решения? </p><p></p><a href="https://habr.com/ru/articles/791874/?utm_campaign=791874&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Интересно Читать Далее</a>]]>
</description>
<pubDate>Tue, 06 Feb 2024 20:16:00 GMT</pubDate>
<dc:creator>
    <![CDATA[GoDevSeoTaxi]]>
</dc:creator>
<category>
    <![CDATA[собеседование]]>
</category>
<category>
    <![CDATA[livecoding]]>
</category>
<category>
    <![CDATA[http]]>
</category>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[benchmark]]>
</category>
<category>
    <![CDATA[задача]]>
</category>
<category>
    <![CDATA[задачи]]>
</category>
<category>
    <![CDATA[задачи для программистов]]>
</category>
<category>
    <![CDATA[задачи для собеседований]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Делим монорепозиторий библиотеки Go на отдельные модули и адаптируем их для локальной разработки]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/avito/articles/790406/</guid>
    <link>https://habr.com/ru/companies/avito/articles/790406/?utm_campaign=790406&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/d0c/c65/f25/d0cc65f25bd9a3413ccd955710b56b39.png" /><p>Библиотека Go в Авито увеличилась с 4 драйверов до 7, и на всё стало не хватать единого модуля. Рассказал, как разделил монорепозиторий на отдельные модули и адаптировал его для разработки в локальной среде. </p><p></p><a href="https://habr.com/ru/articles/790406/?utm_campaign=790406&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Mon, 05 Feb 2024 08:26:23 GMT</pubDate>
    <dc:creator>
        <![CDATA[maranqz (AvitoTech)]]>
    </dc:creator>
    <category>
        <![CDATA[golang]]>
    </category>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[монорепозиторий]]>
    </category>
    <category>
        <![CDATA[библиотека go]]>
    </category>
    <category>
        <![CDATA[покрытие кода]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[Делаем RPG на Go: часть 0]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/791192/</guid>
    <link>https://habr.com/ru/articles/791192/?utm_campaign=791192&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<p>Один из самых частых вопросов в нашем <a href="https://t.me/go_gamedev" rel="nofollow noopener noreferrer">сообществе разработке игр на Go</a> — это с чего начать.</p><br><p>В этой серии статей мы будем изучать движок <a href="https://github.com/hajimehoshi/ebiten/" rel="nofollow noopener noreferrer">Ebitengine</a> и создадим RPG в процессе.</p><br><p><img src="https://habrastorage.org/webt/fl/vb/v-/flvbv-ox6a1prob1p3ag9xj3t7g.jpeg"></p><a href="https://habr.com/ru/articles/791192/?utm_campaign=791192&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать дальше &rarr;</a>]]>
</description>
<pubDate>Sat, 03 Feb 2024 19:23:26 GMT</pubDate>
<dc:creator>
    <![CDATA[quasilyte]]>
</dc:creator>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[gamedev]]>
</category>
<category>
    <![CDATA[game development]]>
</category>
<category>
    <![CDATA[ebiten]]>
</category>
<category>
    <![CDATA[ebitengine]]>
</category>
<category>
    <![CDATA[tutorial]]>
</category>
<category>
    <![CDATA[guide]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Ускоряем Go: известные и не очень методы оптимизации и связанные с ними штуки]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/790758/</guid>
    <link>https://habr.com/ru/articles/790758/?utm_campaign=790758&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/c78/742/cb5/c78742cb5e28046e7d3c0e71aa33161f.jpg" /><p>Привет, Хабр)</p><p>В этой статье хотел бы поделиться приёмами, которые позволяют повысить производительность Golang-кода. Некоторые из этих вещей довольно известные и их могут делать за вас линтеры, например <a href="https://habr.com/ru/articles/414739/" rel="noopener noreferrer nofollow">go-critic</a>,<a href="https://github.com/sonatard/noctx" rel="noopener noreferrer nofollow">noctx</a> (эти 2 касаются<code>defer</code> и отправки запросов без контекста).</p><p><strong>Обсудим:</strong></p><p>простые правила, которые не стоит забывать</p><p>мифы о производительности в духе "А я слышал, что X повышает скорость на Y%"</p><p>более интересные штуки, типо замены <code>switch</code> на<code>map</code>, проведём пару тестов, поэкспериментируем</p><p>Ну и помним, что преждевременная оптимизация — корень всех зол, не стоит сразу пытаться писать скоростной код, это может быть не так просто. </p><p>Поехали!</p><p></p><a href="https://habr.com/ru/articles/790758/?utm_campaign=790758&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Thu, 01 Feb 2024 18:45:06 GMT</pubDate>
<dc:creator>
    <![CDATA[evaclick]]>
</dc:creator>
<category>
    <![CDATA[Оптимизация]]>
</category>
<category>
    <![CDATA[Ускорение кода]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Проверяем актуальность go.mod и go.sum]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/790502/</guid>
    <link>https://habr.com/ru/articles/790502/?utm_campaign=790502&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/647/cee/923/647cee923cdb1849a71a9e3ac391b84e.jpeg" /><p>При ревью запроса на слияние периодически приходится сталкиваться с подозрительными изменениями go.mod и go.sum. Например, когда изменяется только один файл из двух, или когда в Go коде мы не видим то, что могло бы привести к изменениям go.mod и go.sum.</p><p>В таких случаях возникают закономерные вопросы: нужны ли эти изменения? почему они появились?</p><a href="https://habr.com/ru/articles/790502/?utm_campaign=790502&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Wed, 31 Jan 2024 17:00:17 GMT</pubDate>
    <dc:creator>
        <![CDATA[xorcare]]>
    </dc:creator>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[golang]]>
    </category>
    <category>
        <![CDATA[gitlab-ci]]>
    </category>
    <category>
        <![CDATA[modules]]>
    </category>
    <category>
        <![CDATA[ci]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[Погружение в Web RTC или пишем SFU своими силами]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/790348/</guid>
    <link>https://habr.com/ru/articles/790348/?utm_campaign=790348&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/027/051/42c/02705142c45e93d3d93ce29464e05992.jpeg" /><p>Web RTC уже давно имеет поддержку в большинстве браузеров, поэтому обходить стороной технологию довольно глупо. Вот и я так подумал, поэтому в качестве пет-проекта решил написать sfu-сервер на golang.</p><p></p><a href="https://habr.com/ru/articles/790348/?utm_campaign=790348&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Wed, 31 Jan 2024 09:30:56 GMT</pubDate>
    <dc:creator>
        <![CDATA[Aristo78]]>
    </dc:creator>
    <category>
        <![CDATA[webrtc]]>
    </category>
    <category>
        <![CDATA[sfu]]>
    </category>
    <category>
        <![CDATA[Golang]]>
    </category>
    <category>
        <![CDATA[Go]]>
    </category>
    <category>
        <![CDATA[example]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[Анонимный обмен файлами в реалиях глобального наблюдателя]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/789968/</guid>
    <link>https://habr.com/ru/articles/789968/?utm_campaign=789968&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/a13/73b/d84/a1373bd84d62a733cb189d77e3fefb9e.png" /><p>Сегодня уже ни для кого не секрет, что каждое отправляемое нами сообщение из любой точки мира может быть успешно перехвачено, проанализировано и отфильтровано компаниями, корпорациями и государственными спец службами. Каждый наблюдатель в такой ролевой модели преследует выполнение своих, точно заданных задач. Но когда таковые наблюдатели объединяются в одного, сию же минуту рождается, как новая звезда в космическом пространстве, <strong>глобальный наблюдатель</strong>, противодействий которому будет недостаточно со стороны классических анонимных сетей, будь то<strong>Tor</strong>,<strong>I2P</strong> или<strong>Mixminion</strong>.</p><p></p><a href="https://habr.com/ru/articles/789968/?utm_campaign=789968&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Tue, 30 Jan 2024 04:06:33 GMT</pubDate>
<dc:creator>
    <![CDATA[Number571]]>
</dc:creator>
<category>
    <![CDATA[информационная безопасность]]>
</category>
<category>
    <![CDATA[криптография]]>
</category>
<category>
    <![CDATA[программирование]]>
</category>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[децентрализация]]>
</category>
<category>
    <![CDATA[децентрализованные сети]]>
</category>
<category>
    <![CDATA[анонимность]]>
</category>
<category>
    <![CDATA[анонимные сети]]>
</category>
<category>
    <![CDATA[hidden lake]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Fitter —  сшиватель API/Website's.  Большое обновление]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/789952/</guid>
    <link>https://habr.com/ru/articles/789952/?utm_campaign=789952&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/273/c69/8e6/273c698e686578d407efdb079c8c42d8.png" /><p>Добрый вечер всем!<br><br>С момента выхода предидущей <a href="https://habr.com/ru/articles/718972/" rel="noopener noreferrer nofollow">статьи</a> про Fitter прошла достаточно много времени и в связи с этим я хотел поделиться обновлениями, которые были сделаны.<br><br>Итак, что появилось:</p><p></p><a href="https://habr.com/ru/articles/789952/?utm_campaign=789952&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Mon, 29 Jan 2024 20:31:17 GMT</pubDate>
<dc:creator>
    <![CDATA[PYXRU]]>
</dc:creator>
<category>
    <![CDATA[scaping]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[автоматизация]]>
</category>
<category>
    <![CDATA[парсинг]]>
</category>
<category>
    <![CDATA[параллелизм]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Баги, которые мы пишем, ищем и исправляем]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/789772/</guid>
    <link>https://habr.com/ru/articles/789772/?utm_campaign=789772&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/3a3/7b0/624/3a37b0624b5b50636869d1c27d8164c4.png" /><p>Привет! Меня зовут Денис, я - разработчик ПО SEDMAX. Это промышленное ПО для сбора и визуализации данных в энергетике. Как и у всех, у нас бывают баги. Мне бы хотелось поделиться опытом в поиске таких багов, а так же порассуждать на тему того, что необходимо было сделать, чтобы баг не появился. У нас серверная часть написана на go в виде некоторого множества сервисов, поэтому специфика большинства багов будет асинхронное взаимодействие, а код примеров представлен на go.<br></p><p></p><a href="https://habr.com/ru/articles/789772/?utm_campaign=789772&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Mon, 29 Jan 2024 09:55:59 GMT</pubDate>
<dc:creator>
    <![CDATA[slonegd]]>
</dc:creator>
<category>
    <![CDATA[SEDMAX]]>
</category>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[баги]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Некоторые возможности ssh в golang]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/788094/</guid>
    <link>https://habr.com/ru/articles/788094/?utm_campaign=788094&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/556/967/20e/55696720e058df63e9a01a961a7b2449.png" /><p>Создать ssh-сервер на Go можно при помощи модуля <code>golang.org/x/crypto/ssh.</code></p><p>А при помощи пакета <code>github.com/gliderlabs/ssh</code> можно разработать ssh-сервер легко и быстро. Ssh подразумевает не только доступ к оболочке(shell), но и прочие возможности: файловый сервер(sftp), проброс портов.</p><p>README пакета gliderlabs/ssh содержит минимальный пример, выводящий строку "Hello world" любому подключенному ssh-клиенту.</p><p>Реализуем же полноценный терминальный интерфейс.</p><p></p><a href="https://habr.com/ru/articles/788094/?utm_campaign=788094&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">go next()</a>]]>
</description>
<pubDate>Mon, 22 Jan 2024 20:06:52 GMT</pubDate>
<dc:creator>
    <![CDATA[bobalus]]>
</dc:creator>
<category>
    <![CDATA[ssh]]>
</category>
<category>
    <![CDATA[terminal]]>
</category>
<category>
    <![CDATA[user interface]]>
</category>
</item>
<item>
    <title>
        <![CDATA[GoFunc: новая конференция по Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/jugru/articles/787608/</guid>
    <link>https://habr.com/ru/companies/jugru/articles/787608/?utm_campaign=787608&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/b30/a2e/976/b30a2e9762c43a169aa4224f6ad84117.jpeg" /><p>Разработка на Go — особый мир. Этот язык не так популярен, как Python или JavaScript, но благодаря этому и дурацкой шумихи вокруг него меньше. Популярность приманивает «случайно проходивших мимо» и вызывает много глупых холиваров. А тем временем Go собирает людей, которые хорошо понимают, зачем они здесь, и хотят эффективно решать реальные задачи.&nbsp;</p><p>В этом могут помочь конференции. Для многих других разработчиков мы уже давно их проводим (вроде HolyJS или С++ Russia). А в марте впервые проведём новую конференцию <strong><a href="https://gofunc.ru/?utm_source=habr&amp;urm_medium=787608"><u>GoFunc</u></a></strong>. Главное, что нужно о ней знать:</p><p><strong>•</strong> Полностью в онлайне, можно подключиться откуда угодно.&nbsp;<br><strong>•</strong>&nbsp;Технические доклады без воды и маркетинга.<br><strong>•</strong>&nbsp;Если вы сами готовы выступить, сейчас последние дни<a href="https://gofunc.ru/callforpapers/?utm_source=habr&amp;urm_medium=787608"><u>подачи заявок</u></a>.</p><p>А подробнее — в полном тексте:</p><p></p><a href="https://habr.com/ru/articles/787608/?utm_campaign=787608&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Fri, 19 Jan 2024 14:16:56 GMT</pubDate>
<dc:creator>
    <![CDATA[phillennium (JUG Ru Group)]]>
</dc:creator>
<category>
    <![CDATA[gofunc]]>
</category>
<category>
    <![CDATA[go]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Сравниваем форматы сериализации на Go: скорость и удобство]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/avito/articles/786756/</guid>
    <link>https://habr.com/ru/companies/avito/articles/786756/?utm_campaign=786756&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/82d/90c/888/82d90c888b83d113b1fb8358d18dace3.png" /><p>Дмитрий Королёв, бэкенд-разработчик в Авито, разобрал на примерах, чем отличаются друг от друга форматы сериализации данных, и как выбрать самый удобный. </p><p></p><a href="https://habr.com/ru/articles/786756/?utm_campaign=786756&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Thu, 18 Jan 2024 10:48:49 GMT</pubDate>
    <dc:creator>
        <![CDATA[Jimiliani2 (AvitoTech)]]>
    </dc:creator>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[benchmarking]]>
    </category>
    <category>
        <![CDATA[сериализация]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[SOLID и DRY в Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/786314/</guid>
    <link>https://habr.com/ru/companies/otus/articles/786314/?utm_campaign=786314&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/dee/b69/b40/deeb69b40c185ce6a65363a44095bd07.png" /><p><em>Привет, Хабр!</em></p><p>Все знают, что SOLID и DRY делают код более чистым, гибким и, что немаловажно, понятным для других разрабов. Каждый компонент выполняет свою функцию и вместе они создают гармонию. </p><p>В этой статье рассмотрим как эти принципы применяются в golang. </p><p></p><a href="https://habr.com/ru/articles/786314/?utm_campaign=786314&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Thu, 18 Jan 2024 06:16:54 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[solid]]>
</category>
<category>
    <![CDATA[dry]]>
</category>
</item>
<item>
    <title>
        <![CDATA[RPC на примере gRPC. Когда применять и как работает]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/787164/</guid>
    <link>https://habr.com/ru/articles/787164/?utm_campaign=787164&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/01d/9fa/e56/01d9fae561c2194ba3f38797acfb40ed.png" /><p>   Доброго времени суток, коллеги. Я go разработчик, по-этому примеры будут преимущественно на нём. Хочу порассуждать о методах взаимодействия сервисов. Тема очень обширна. Зачастую мы пользуемся реализациями, которые не всегда подходят, т.к. не знаем куда применить ту или иную технологию. Я хочу попытаться начать закрывать этот пробел как у себя, так и у людей. Любые комментарии и конструктивные исправления приветствуются.</p><p>   В данной статье хочу разобрать как работает gRPC, что он может, а так же когда и зачем его использовать.</p><a href="https://habr.com/ru/articles/787164/?utm_campaign=787164&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Узнать -&gt;</a>]]>
    </description>
    <pubDate>Thu, 18 Jan 2024 05:21:48 GMT</pubDate>
    <dc:creator>
        <![CDATA[Bearatol]]>
    </dc:creator>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[grpc]]>
    </category>
    <category>
        <![CDATA[rpc]]>
    </category>
    <category>
        <![CDATA[grpc-gateway]]>
    </category>
    <category>
        <![CDATA[grpc-go]]>
    </category>
    <category>
        <![CDATA[architecture]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[Go — 100 вопросов/заданий с собеседований]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/786826/</guid>
    <link>https://habr.com/ru/articles/786826/?utm_campaign=786826&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/aa6/2ff/7b3/aa62ff7b34a9d91ac1cc35e1790eadad.png" /><p>Приветствую тебя, хаброжитель!</p><p>В этой статье разберём 100 вопросов, они покрывают львиную долю того, что могут спросить на собеседовании джуниор Go-разработчика с практически любой специализацией. Конечно же, в реальной работе на Go требуются <em>немного</em> другие скиллы, чем умение быстро ответить на любой вопрос. Однако сложилась<em>добрая</em> традиция делать из собеседования викторину с главным призом в виде трудоустройства — к этому нужно быть готовым.</p><p></p><a href="https://habr.com/ru/articles/786826/?utm_campaign=786826&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Tue, 16 Jan 2024 12:50:04 GMT</pubDate>
<dc:creator>
    <![CDATA[evaclick]]>
</dc:creator>
<category>
    <![CDATA[✏️ Технотекст 2023]]>
</category>
<category>
    <![CDATA[Собеседование]]>
</category>
</item>
<item>
    <title>
        <![CDATA[TLS Client Hello — перехватываем и парсим — Nginx + Lua / Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/786670/</guid>
    <link>https://habr.com/ru/articles/786670/?utm_campaign=786670&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/546/600/f79/546600f79ce7e0796adff40ac48e551c.png" /><p>Возникла на днях достаточно интересная задачка - по образу сайта <a href="https://www.howsmyssl.com/" rel="noopener noreferrer nofollow"><u>https://www.howsmyssl.com/</u></a> получить на страничке список Cipher Suites которые при TLS Handshake клиент передает в своем Client hello.</p><p>А заодно обдумать инструмент, который позволит работать с другими заголовками, в частности - Proxy-Connection</p><a href="https://habr.com/ru/articles/786670/?utm_campaign=786670&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Tue, 16 Jan 2024 05:50:07 GMT</pubDate>
<dc:creator>
    <![CDATA[Desler]]>
</dc:creator>
<category>
    <![CDATA[tls]]>
</category>
<category>
    <![CDATA[handshake]]>
</category>
<category>
    <![CDATA[nginx proxy]]>
</category>
<category>
    <![CDATA[cryptobyte]]>
</category>
<category>
    <![CDATA[proxy]]>
</category>
<category>
    <![CDATA[proxy-server]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Кратко про то, как устроен компилятор Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/mvideo/articles/784248/</guid>
    <link>https://habr.com/ru/companies/mvideo/articles/784248/?utm_campaign=784248&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<p><em>Привет, Хабр!</em></p><p>В back in 2007 трое гуру из Google — Роб Пайк, Кен Томпсон и Роберт Гриземер — решили, что мир нуждается в чем-то свежем и быстром. Они метили на упрощение процесса разработки, но при этом хотели сохранить весь перфоманс на уровне C. И вот, в 2009 году появился Golang.</p><p>Первые версии были далеки от совершенства, но с каждым релизом Go становился только круче. Garbage collector, goroutines, channels — эти фичи сделали Go особенным. С каждым апдейтом Go становился только быстрее и надежнее. И не забудем про экосистему — с каждым годом она росла как на дрожжах, предлагая всё новые инструменты и библиотеки.</p><p>С версии 1.5 компилятор Go сам начал компилироваться в Go. С тех пор производительность только растет. JIT, улучшения в escape analysis, введение модулей в версии 1.11 — каждая фича делала Go всё более мощным.</p><p>В последниях версиях появились дженерики, которые все так долго ждали. Это был следующий шаг в удобстве написания кода в go.</p><p></p><a href="https://habr.com/ru/articles/784248/?utm_campaign=784248&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Mon, 15 Jan 2024 07:22:33 GMT</pubDate>
<dc:creator>
    <![CDATA[damarik (М.Видео-Эльдорадо)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Высокопроизводительное кэширование с помощью Redis и Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/786296/</guid>
    <link>https://habr.com/ru/articles/786296/?utm_campaign=786296&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/772/3fc/f8c/7723fcf8c6dafcb8ac0dd3c850cbe563.jpg" /><p><strong>Go</strong>&nbsp;– отличный язык для создания высокопроизводительных веб-приложений, а высокопроизводительные веб-приложения часто требуют централизованного кэширования.</p><p>Стандартом де-факто для централизованного кэширования является&nbsp;<strong>Redis</strong>, но, популярные сегодня библиотеки Go не поддерживают потоковую передачу данных, эффективных с точки зрения памяти.&nbsp;</p><p>Вместо этого они предлагают []byte API, с которыми вы взаимодействуете следующим образом:</p><p></p><a href="https://habr.com/ru/articles/786296/?utm_campaign=786296&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Sun, 14 Jan 2024 14:31:23 GMT</pubDate>
<dc:creator>
    <![CDATA[Golangcoder]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[redis]]>
</category>
<category>
    <![CDATA[хранение данных]]>
</category>
<category>
    <![CDATA[github]]>
</category>
<category>
    <![CDATA[opensource]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Сериализация данных в Golang с Protobuf]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/784732/</guid>
    <link>https://habr.com/ru/companies/otus/articles/784732/?utm_campaign=784732&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/0af/b70/460/0afb704601c81b442860ef2ab13c2edc.png" /><p><em>Привет, Хабр!</em></p><p><strong>Protobuf, или Protocol Buffers</strong>, это бинарный формат сериализации, разработанный в Google для эффективного обмена данными между сервисами. Это как JSON, только компактнее, быстрее и типизированнее. Если JSON был вашим первым крашем в мире сериализации, то Protobuf – это тот, с кем вы хотите серьёзных отношений.</p><p>Если вы хотите, чтобы ваши приложения общались между сервисами с молниеносной скоростью и минимальными задержками, тогда Protobuf — твой хороший выбор.  </p><p></p><a href="https://habr.com/ru/articles/784732/?utm_campaign=784732&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Fri, 12 Jan 2024 15:20:42 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[protobuf]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Go: передача значений VS передача указателей]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/it-guide/articles/744046/</guid>
    <link>https://habr.com/ru/companies/it-guide/articles/744046/?utm_campaign=744046&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/557/f67/419/557f67419fdc9a3d2caabb36ca98be99.jpg" /><p>Go - один из немногих языков, в которых структуры можно передавать параметрами и возвращать из функций как по значению, так и по указателю. Это приводит к большей выразительности языка, но также разделяет общество разработчиков Go на два лагеря: сторонников указателей и сторонников значений.</p><p>В данной статье предлагается во многом субъективное сравнение обоих способов и делается попытка убедить читателей передавать и возвращать значения в тех случаях, где это возможно.</p><a href="https://habr.com/ru/articles/744046/?utm_campaign=744046&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Thu, 11 Jan 2024 15:10:24 GMT</pubDate>
    <dc:creator>
        <![CDATA[iskorotkov (Хабр IT-гид)]]>
    </dc:creator>
    <category>
        <![CDATA[go]]>
    </category>
    <category>
        <![CDATA[heap]]>
    </category>
    <category>
        <![CDATA[pointers]]>
    </category>
    <category>
        <![CDATA[указатели]]>
    </category>
    <category>
        <![CDATA[code style]]>
    </category>
</item>
<item>
    <title>
        <![CDATA[Range Loop в Go: подводные камни, как с ними бороться и что нас ждёт в версии 1.22]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/yandex_praktikum/articles/783504/</guid>
    <link>https://habr.com/ru/companies/yandex_praktikum/articles/783504/?utm_campaign=783504&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/06e/454/bcf/06e454bcfa51f735e17053206ddead7d.png" /><p>Привет, Хабр! Меня зовут Рафаэль Мустафин, я ментор на курсе <a href="https://practicum.yandex.ru/go-advanced/?utm_source=pr&amp;utm_medium=content&amp;utm_campaign=pr_content_go-advanced_habr&amp;utm_content=09_01_2024">«Go-разработчик»</a> в Яндекс Практикуме. Эта статья посвящена нюансам цикла range в Go. Мы рассмотрим распространённые подводные камни, лучшие практики и интересные изменения, ожидаемые в Go 1.22.</p><p></p><a href="https://habr.com/ru/articles/783504/?utm_campaign=783504&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Tue, 09 Jan 2024 06:30:47 GMT</pubDate>
<dc:creator>
    <![CDATA[Bazys (Яндекс Практикум)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[go]]>
</category>
<category>
    <![CDATA[range loop]]>
</category>
<category>
    <![CDATA[циклы]]>
</category>
<category>
    <![CDATA[цикл range]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Паттерн Unit of Work в разрезе чистой архитектуры DDD на языке Golang]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/articles/784186/</guid>
    <link>https://habr.com/ru/articles/784186/?utm_campaign=784186&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<p>    Всем привет! Недавно мне выпала возможность разработать шаблон сервиса, который можно&nbsp;было&nbsp;бы использовать как&nbsp;для&nbsp;монолитной, так и для&nbsp;микро‑сервисной архитектуры. Шаблон должен&nbsp;был придерживаться принципов Domain‑Driven Design (DDD). В&nbsp;этом процессе, я столкнулся с&nbsp;двумя интересными проблемами:</p><p><strong>Проблема 1: Сложности обеспечения транзакционности базы данных</strong></p><p>  При&nbsp;разработке сервисов, часто возникает неотъемлемая потребность в&nbsp;использовании транзакций базы данных для&nbsp;обеспечения целостности данных. Однако, при&nbsp;попытке интегрировать транзакционную логику в&nbsp;традиционные подходы, столкнулся с&nbsp;трудностями. Связывание транзакционной логики с&nbsp;логикой слоя базы данных оказалось нетривиальным и привело к&nbsp;нарушению принципов разделения ответственности. Это, в&nbsp;свою очередь, сказалось на&nbsp;тестировании и поддержке кода.</p><p><strong>Проблема 2: Нарушение изолированности слоя</strong></p><p>  В&nbsp;попытке решить первую проблему, некоторые разработчики переносят работу с&nbsp;транзакциями на&nbsp;уровень слоя приложения, чтобы избежать прямой зависимости от&nbsp;базы данных. Однако, такой подход, несмотря на&nbsp;его обоснование, может нарушить изолированность слоев и противоречить принципам DDD и чистой архитектуры. Это, в&nbsp;конечном итоге, затрудняет поддержку приложения и усложняет его масштабирование.<br>  Эти две проблемы стали отправной точкой для&nbsp;исследования применения паттерна Unit of Work и его роли в&nbsp;обеспечении надежности и консистентности данных в&nbsp;контексте Golang и DDD. </p><p>В&nbsp;статье я расскажу о&nbsp;своем подходе к&nbsp;решению этих задач.</p><a href="https://habr.com/ru/articles/784186/?utm_campaign=784186&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Sat, 30 Dec 2023 15:30:34 GMT</pubDate>
<dc:creator>
    <![CDATA[ishmel]]>
</dc:creator>
<category>
    <![CDATA[ddd]]>
</category>
<category>
    <![CDATA[unit of work]]>
</category>
<category>
    <![CDATA[arhitectura]]>
</category>
<category>
    <![CDATA[архитектура]]>
</category>
<category>
    <![CDATA[архитектура приложений]]>
</category>
<category>
    <![CDATA[голанг]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[hexagon]]>
</category>
<category>
    <![CDATA[гексогональная архитектура]]>
</category>
</item>
<item>
    <title>
        <![CDATA[[Перевод] Миграции в YDB с помощью «goose»]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/ydb/articles/783254/</guid>
    <link>https://habr.com/ru/companies/ydb/articles/783254/?utm_campaign=783254&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/9d0/7e8/5d9/9d07e85d9ab1436d308f697b48854c97.png" /><p>Любой более или менее серьезный продакшен, работающий с базой данных, подразумевает процесс миграции - обновление структуры базы данных от одной версии до другой (обычно более новой) [<a href="https://habr.com/ru/articles/121265/">источник</a>].</p><p>Миграции в БД можно делать вручную или использовать для этого специальные утилиты (фреймворки). В данной статье речь идет об утилите&nbsp;<a href="https://github.com/pressly/goose">goose</a>. Это инструмент миграции схемы, который обеспечивает управление миграциями схемы в проекте. Начиная с версии&nbsp;<a href="https://github.com/pressly/goose/releases/tag/v3.16.0">v3.16.0</a>&nbsp;goose поддерживает&nbsp;<a href="https://ydb.tech/">YDB</a>&nbsp;- распределенную open-source СУБД. В данной статье мы будем разбирать кейс применения миграций конкретно в YDB.</p><p></p><a href="https://habr.com/ru/articles/783254/?utm_campaign=783254&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Fri, 29 Dec 2023 03:31:19 GMT</pubDate>
<dc:creator>
    <![CDATA[asmyasnikov (YDB)]]>
</dc:creator>
<category>sql</category>
<category>yql</category>
<category>ydb</category>
<category>базы данных</category>
<category>миграции</category>
<category>миграция бд</category>
<category>goose</category>
</item>
<item>
    <title>
        <![CDATA[Логирование в Golang]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/782812/</guid>
    <link>https://habr.com/ru/companies/otus/articles/782812/?utm_campaign=782812&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/b8a/851/f7c/b8a851f7cd7353514281f5d31c50db6a.jpg" /><p><em>Привет, Хабр!</em></p><p>Как в Golang логирование поживает? Рассмотрим этот вопрос в статье.</p><p>Рассмотрим основные библиотеки и подходы.</p><p></p><a href="https://habr.com/ru/articles/782812/?utm_campaign=782812&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Wed, 27 Dec 2023 05:13:01 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[инфрастуктура]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[логирование]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Дженерики в go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/782414/</guid>
    <link>https://habr.com/ru/companies/otus/articles/782414/?utm_campaign=782414&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/063/30e/343/06330e343f22e55a2679b8e849340f6f.jpg" /><p><em>Привет, Хабр!</em></p><p>Дженерики (или generics) существуют во многих языках, таких как Java, C#, и Rust, но для Go это относительно новая фича, введенная в версии 1.18 в 2022 году.</p><p>До версии 1.18 Go был известен своим строгим и простым подходом к типизации. Однако, с ростом сообщества стало очевидно, что нужен более гибкий инструмент для работы с различными типами данных. Все вечно сталкивались с проблемами, когда им приходилось писать много шаблонного кода для разных типов данных или использовать интерфейсы и пустые интерфейсы.</p><p>Go представила предложение по введению дженериков, которое после долгих обсуждений и тестирований было реализовано в версии 1.18. Это был ответ на просьбу сообщества. + к карме</p><p>Дженерики позволяют писать более чистый и понятный код. Вы определяете общую структуру один раз, и затем можете использовать её с любым типом данных. </p><p></p><a href="https://habr.com/ru/articles/782414/?utm_campaign=782414&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Tue, 26 Dec 2023 04:24:45 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[программирование]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Алгоритмы балансировки нагрузки на Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/782064/</guid>
    <link>https://habr.com/ru/companies/otus/articles/782064/?utm_campaign=782064&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/158/494/e0f/158494e0f7cfbe79ec690c9e84684797.png" /><p><strong>Салют Хабр и с наступающим новым годом! </strong></p><p>Каждое приложение стремится быть доступным <strong>24/7</strong>, балансировка нагрузки становится настоящим мастхевом.</p><p>В самом общем смысле, балансировка, это процесс распределения входящего трафика между несколькими серверами или ресурсами.</p><p>Представьте себе мост, по которому одновременно пытаются пройти тысячи людей. Без правильной организации движения это превратится в хаос.</p><p></p><a href="https://habr.com/ru/articles/782064/?utm_campaign=782064&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Mon, 25 Dec 2023 07:47:38 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[otus]]>
</category>
<category>
    <![CDATA[балансировка нагрузки]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Проектирование fault-tolerant систем на Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/781964/</guid>
    <link>https://habr.com/ru/companies/otus/articles/781964/?utm_campaign=781964&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/6ac/cf9/4f8/6accf94f8d3074e835089ad187a53453.png" /><p><em>Привет, Хабр!</em></p><p><strong>Fault-tolerant системы</strong> — это те, которые способны продолжать функционировать даже в условиях частичных сбоев или неисправностей. Основная фича таких систем заключается в том, чтобы<strong>обеспечить непрерывность работы приложения</strong> даже при возникновении ошибок или непредвиденных ситуаций. Это достигается за счет ряда архитектурных и программных решений, направленных на предотвращение полного отказа системы при возникновении отдельных сбоев.</p><p>Go благодаря своей простоте, производительности и, что наиболее важно, поддержке конкурентности на уровне языка, становится идеальным выбором для создания fault-tolerant систем.</p><p></p><a href="https://habr.com/ru/articles/781964/?utm_campaign=781964&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Sun, 24 Dec 2023 17:01:22 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[паттерны]]>
</category>
<category>
    <![CDATA[otus]]>
</category>
</item>
<item>
    <title>
        <![CDATA[WebSocket в Go и причем тут горилла]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/781748/</guid>
    <link>https://habr.com/ru/companies/otus/articles/781748/?utm_campaign=781748&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/36c/944/65e/36c94465e0cdec7d12d04684e0c570d5.png" /><p><em>Привет, Хабр!</em></p><p>WebSocket позволяет открыть интерактивный коммуникационный сеанс между пользовательским браузером и сервером. Здесь большое отличие от традиционного HTTP, который ограничен моделью запрос-ответ и не подходит для сценариев, требующих постоянного обмена данными</p><p>Go с помощью своей простоты и поддержкой конкурентности становится хорошим кандидатом для работы с WebSocket.</p><p></p><a href="https://habr.com/ru/articles/781748/?utm_campaign=781748&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
</description>
<pubDate>Sun, 24 Dec 2023 14:12:11 GMT</pubDate>
<dc:creator>
    <![CDATA[badcasedaily1 (OTUS)]]>
</dc:creator>
<category>
    <![CDATA[otus]]>
</category>
<category>
    <![CDATA[golang]]>
</category>
<category>
    <![CDATA[программирование]]>
</category>
<category>
    <![CDATA[websocket]]>
</category>
</item>
<item>
    <title>
        <![CDATA[Toolchain в Go]]>
    </title>
    <guid isPermaLink="true">https://habr.com/ru/companies/otus/articles/782218/</guid>
    <link>https://habr.com/ru/companies/otus/articles/782218/?utm_campaign=782218&amp;utm_source=habrahabr&amp;utm_medium=rss</link>
    <description>
        <![CDATA[<img src="https://habrastorage.org/getpro/habr/upload_files/7b0/4b9/002/7b04b9002202b9197ff2960be7e93b1e.jpg" /><p>Привет, коллеги! В Го toolchain (цепочка инструментов) это не просто buzzword, а реальная рабочая фича. Если вы провели немало времени, погружаясь в дебри кода и модулей, вы знаете, что каждая строчка и каждый пакет как и в любом япе имеют свое место и значение.</p><p>Цепочка инструментов или toolchain (тулчейн звучит покруче) используются для создания, тестирования, отладки и управления вашими Go-проектами.</p><p></p><a href="https://habr.com/ru/articles/782218/?utm_campaign=782218&amp;utm_source=habrahabr&amp;utm_medium=rss#habracut">Читать далее</a>]]>
    </description>
    <pubDate>Thu, 21 Dec 2023 09:16:26 GMT</pubDate>
    <dc:creator>
        <![CDATA[badcasedaily1 (OTUS)]]>
    </dc:creator>
    <category>
        <![CDATA[golang]]>
    </category>
    <category>
        <![CDATA[цепочка инструментов]]>
    </category>
</item>
</channel>
</rss>